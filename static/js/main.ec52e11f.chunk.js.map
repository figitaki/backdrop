{"version":3,"sources":["components/Card/index.js","components/Card/Card.jsx","components/Button/index.js","components/Button/Button.jsx","pages/Home.jsx","components/Backdrop.jsx","components/TextInput/index.js","components/TextInput/TextInput.js","pages/Result.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","_ref","children","react_default","a","createElement","class","Button","onClick","wide","className","style","width","Home","handleChange","e","target","files","length","Promise","all","Array","from","map","image","createImageBitmap","then","images","_this","props","onUpload","slice","openPicker","fileInput","click","onOpenPicker","_this2","this","components_Card","role","components_Button","fontSize","ref","input","onChange","display","marginTop","accept","multiple","type","React","Component","drawScreenshot","ctx","screenshot","x","ratio","shadowColor","shadowBlur","drawImage","height","fillStyle","font","textAlign","fillText","label","Backdrop","refs","canvas","getContext","scale","update","screenshots","fillRect","WIDTH","output","src","toDataURL","TextInput","placeholder","Result","state","labels","index","newLabels","value","setState","Object","objectSpread","Backdrop_Backdrop","concat","_","components_TextInput","gifUrls","App","pickerOpen","_this$state","gif","Result_Result","Home_Home","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ec52e11f.chunk.js","sourcesContent":["import Card from './Card'\nexport default Card\n","import React from 'react'\nimport './Card.css'\n\nexport default ({ children }) => <div class=\"card\">{children}</div>\n","import Button from './Button'\nexport default Button\n","import React from 'react'\nimport './Button.css'\n\nexport default ({ onClick, children, wide }) => (\n  <button\n    className=\"btn\"\n    style={{ width: wide ? '100%' : 'auto' }}\n    onClick={onClick}\n  >\n    {children}\n  </button>\n)\n","import React from 'react'\n\nimport Card from '../components/Card'\nimport Button from '../components/Button'\n\nexport default class Home extends React.Component {\n  handleChange = e => {\n    if (!e.target.files.length) return\n    Promise.all(\n      Array.from(e.target.files).map(image => createImageBitmap(image))\n    ).then(images => {\n      this.props.onUpload && this.props.onUpload(images.slice(0, 3))\n    })\n  }\n\n  openPicker = () => {\n    this.fileInput.click()\n    this.props.onOpenPicker && this.props.onOpenPicker()\n  }\n\n  render() {\n    return (\n      <Card>\n        <h1>\n          <span role=\"img\">ðŸ“¸</span> Backdrop\n        </h1>\n        <p>Because screenshots were meant to be lit</p>\n        <Button onClick={this.openPicker}>Upload Your Screenshots</Button>\n        <p style={{ fontSize: '12px' }}>\n          We recommend 2 images for before & after shots <br />\n          or 3 for device size comparisons.\n        </p>\n        <input\n          ref={input => (this.fileInput = input)}\n          onChange={this.handleChange}\n          style={{ display: 'none', marginTop: '8px' }}\n          accept=\"image/png\"\n          multiple\n          type=\"file\"\n        />\n      </Card>\n    )\n  }\n}\n","import React from 'react'\n\nconst WIDTH = 665\n\n// screenshot is an object with image and label\nlet drawScreenshot = (ctx, screenshot, x) => {\n  let ratio = 175 / screenshot.image.width\n  let y = 45\n\n  ctx.shadowColor = 'black'\n  ctx.shadowBlur = 6\n  ctx.drawImage(\n    screenshot.image,\n    x,\n    y + (400 - screenshot.image.height * ratio),\n    screenshot.image.width * ratio,\n    screenshot.image.height * ratio\n  )\n\n  ctx.fillStyle = 'white'\n  ctx.shadowBlur = 0\n  ctx.font = '16px Graphik-Medium'\n  ctx.textAlign = 'center'\n  ctx.fillText(screenshot.label, x + (screenshot.image.width * ratio) / 2, 475)\n}\n\nexport default class Backdrop extends React.Component {\n  componentDidMount() {\n    const canvas = this.refs.canvas\n    const ctx = canvas.getContext('2d')\n\n    // Setup canvas and fill background\n    ctx.scale(2, 2)\n\n    this.update()\n  }\n\n  componentDidUpdate() {\n    this.update()\n  }\n\n  update() {\n    const canvas = this.refs.canvas\n    const ctx = canvas.getContext('2d')\n    const { screenshots } = this.props\n\n    ctx.fillStyle = '#1652F0'\n    ctx.fillRect(0, 0, canvas.width, canvas.height)\n\n    // Layout the screenshots\n    if (screenshots.length === 1) {\n      drawScreenshot(ctx, screenshots[0], WIDTH / 2 - 175 / 2)\n    } else if (screenshots.length === 2) {\n      drawScreenshot(ctx, screenshots[0], WIDTH / 3 - 175 / 2)\n      drawScreenshot(ctx, screenshots[1], (WIDTH / 3) * 2 - 175 / 2)\n    } else {\n      drawScreenshot(ctx, screenshots[0], WIDTH / 5 - 175 / 2)\n      drawScreenshot(ctx, screenshots[1], (WIDTH / 5) * 2.5 - 175 / 2)\n      drawScreenshot(ctx, screenshots[2], (WIDTH / 5) * 4 - 175 / 2)\n    }\n\n    const output = this.refs.output\n    output.src = canvas.toDataURL('image/png')\n  }\n\n  render() {\n    return (\n      <div>\n        <canvas\n          ref=\"canvas\"\n          width=\"1330\"\n          height=\"1024\"\n          style={{ display: 'none' }}\n        />\n        <img ref=\"output\" width=\"600\" height=\"460\" />\n      </div>\n    )\n  }\n}\n","import TextInput from './TextInput'\nexport default TextInput\n","import React from 'react'\nimport './TextInput.css'\n\nexport default ({ onChange, label }) => (\n  <div className=\"textInput-wrapper\">\n    <input\n      type=\"text\"\n      onChange={onChange}\n      className=\"textInput\"\n      placeholder=\"Label\"\n    />\n    <p>{label}</p>\n  </div>\n)\n","import React from 'react'\n\nimport Card from '../components/Card'\nimport Button from '../components/Button'\nimport Backdrop from '../components/Backdrop'\nimport TextInput from '../components/TextInput'\n\nexport default class Result extends React.Component {\n  state = {\n    labels: {},\n  }\n\n  handleChange = (e, index) => {\n    const { labels } = this.state\n\n    const newLabels = {}\n    newLabels[index] = e.target.value\n\n    this.setState({\n      labels: {\n        ...labels,\n        ...newLabels,\n      },\n    })\n  }\n\n  render() {\n    const { images } = this.props\n    const { labels } = this.state\n    return (\n      <Card>\n        <h1>\n          <span role=\"img\">ðŸ“¸</span> Backdrop\n        </h1>\n        <p>Because screenshots were meant to be lit</p>\n        <Backdrop\n          screenshots={images.map((image, index) => ({\n            image,\n            label: labels[index] || `Screen ${index + 1}`,\n          }))}\n        />\n        <div className=\"textFields\">\n          {images.map((_, index) => (\n            <TextInput\n              label={`Screen ${index + 1} Text`}\n              onChange={e => this.handleChange(e, index)}\n            />\n          ))}\n        </div>\n        <Button wide>Save this Beauty</Button>\n      </Card>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport './App.css'\n\nimport Home from './pages/Home'\nimport Result from './pages/Result'\n\nconst gifUrls = {\n  fire: 'https://media.giphy.com/media/lQzCIfrVOrpC0/giphy.gif',\n  uploading: 'https://media.giphy.com/media/RHEqKwRZDwFKE/giphy.gif',\n  magic: 'https://media.giphy.com/media/l0ExhcMymdL6TrZ84/giphy.gif',\n}\n\nclass App extends Component {\n  state = {\n    images: [],\n    pickerOpen: false,\n  }\n\n  render() {\n    const { images, pickerOpen } = this.state\n    const gif = images.length\n      ? gifUrls.magic\n      : pickerOpen\n      ? gifUrls.uploading\n      : gifUrls.fire\n\n    return (\n      <div className=\"App\">\n        {images.length ? (\n          <Result images={images} />\n        ) : (\n          <Home\n            onOpenPicker={() => this.setState({ pickerOpen: true })}\n            onUpload={images => this.setState({ images })}\n          />\n        )}\n        <img\n          src={gif} //\"https://media.giphy.com/media/4TMqcN59kg3Yc/giphy.gif\"\n          className=\"backgroundGif\"\n        />\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}